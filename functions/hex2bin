if [ $# -eq 0 ]; then
    echo "Usage: hex2bin (0x)HEX_NUMBER"
    return 1
fi

# Hexadecimal with/without "0x" prefix or/and grouped
local HEX_NUMBER=$(echo "$*" | tr -d ' ' | cut -d'x' -f2 | tr '[:lower:]' '[:upper:]')

# bc doesn't allow lowercase
local re='^[0-9A-F]+$'
if ! [[ $HEX_NUMBER =~ $re ]]; then
   echo "Error: Not a valid hex number" >&2;
   return 2
fi

local bin_number=$(echo "obase=2; ibase=16; $HEX_NUMBER" | bc)

local length=${#bin_number}

# (N + (denom-1)) / (denom)
local factor_round_up=$(((length + 2) / 3))
local extended_length=$((3 * factor_round_up))

local zeros=""
local i
for i in $(seq 1 $((extended_length - length))); do
    zeros+="0"
done

local extended_bin_number=$zeros$bin_number

printf "0b%s\n" "$bin_number"
printf "%s\n" "$bin_number"
printf "0b%s\n" "$extended_bin_number"
printf "%s\n" "$extended_bin_number"
printf "%s\n" "$(echo "$extended_bin_number" | sed -r 's/(.{4})/\1 /g')"
